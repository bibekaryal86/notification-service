/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package notification.service;

import io.github.bibekaryal86.shdsvc.helpers.CommonUtilities;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import notification.service.app.model.ServerConfig;
import notification.service.app.repository.EmailRecordRepository;
import notification.service.app.server.NettyServer;
import notification.service.app.service.EmailService;
import notification.service.app.util.Constants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {
  private static final Logger log = LoggerFactory.getLogger(App.class);

  public static void main(String[] args) throws Exception {
    log.info("Begin notification-service initialization...");
    validateAppInit();
    startNettyServer();
    log.info("End notification-service initialization...");
  }

  private static void validateAppInit() {
    final Map<String, String> properties =
        CommonUtilities.getSystemEnvProperties(Constants.ENV_KEY_NAMES);
    final List<String> requiredEnvProperties =
        Constants.ENV_KEY_NAMES.stream()
            .filter(key -> !Constants.ENV_SERVER_PORT.equals(key))
            .toList();
    final List<String> errors =
        requiredEnvProperties.stream().filter(key -> properties.get(key) == null).toList();
    if (!errors.isEmpty()) {
      throw new IllegalStateException(
          "One or more environment configurations could not be accessed...");
    }
  }

  private static void startNettyServer() throws Exception {
    final ServerConfig serverConfig = createNettyServerConfig();
    final EmailService emailService = createEmailService();
    final EmailRecordRepository emailRecordRepository = createEmailRecordRepository();

    final NettyServer nettyServer =
        new NettyServer(
            createNettyServerConfig(), createEmailService(), createEmailRecordRepository());
    Runtime.getRuntime().addShutdownHook(new Thread(emailRecordRepository::close));
    nettyServer.start();
  }

  private static ServerConfig createNettyServerConfig() {
    int serverPort =
        Integer.parseInt(
            CommonUtilities.getSystemEnvProperty(
                Constants.ENV_SERVER_PORT, Constants.ENV_PORT_DEFAULT));

    return new ServerConfig(
        serverPort,
        Constants.BOSS_GROUP_THREADS,
        Constants.WORKER_GROUP_THREADS,
        Constants.MAX_CONTENT_LENGTH,
        Constants.CONNECT_TIMEOUT_MILLIS,
        Constants.SSO_BACKLOG);
  }

  private static EmailService createEmailService() {
    final String smtpHost = CommonUtilities.getSystemEnvProperty(Constants.ENV_SMTP_HOST);
    final int smtpPort =
        Integer.parseInt(CommonUtilities.getSystemEnvProperty(Constants.ENV_SMTP_PORT));
    final String smtpEmail = CommonUtilities.getSystemEnvProperty(Constants.ENV_SMTP_EMAIL);
    final String smtpPassword = CommonUtilities.getSystemEnvProperty(Constants.ENV_SMTP_PWD);
    return new EmailService(smtpHost, smtpPort, smtpEmail, smtpPassword);
  }

  private static EmailRecordRepository createEmailRecordRepository() throws SQLException {
    final String dbHost = CommonUtilities.getSystemEnvProperty(Constants.ENV_DB_HOST);
    final String dbName = CommonUtilities.getSystemEnvProperty(Constants.ENV_DB_NAME);
    final String dbUsername = CommonUtilities.getSystemEnvProperty(Constants.ENV_DB_USER);
    final String dbPassword = CommonUtilities.getSystemEnvProperty(Constants.ENV_DB_PWD);
    return new EmailRecordRepository(dbHost, dbName, dbUsername, dbPassword);
  }
}
